version: '3.8'
services:
  backend:
    build:
      context: ./backend/weather
      dockerfile: Dockerfile
    ports:
      - 8000:8000
      - 5678:5678
    #volumes:
    #  - ./backend/weather:/usr/src/app_be
    # volumes:
    #   - type: bind
    #     source: ./backend/weather
    #     target: /usr/src/app_be
    # working_dir: /usr/src/app_be
    depends_on:
      db:
        condition: service_healthy
      data_service:
        condition: service_healthy      
    container_name: weather_python_container
    # command: python manage.py runserver 0.0.0.0:8000
    ## command: pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate
    command:
      - /bin/bash
      - -c
      - |
        python manage.py makemigrations &&
        python manage.py migrate --fake-initial &&
        python manage.py runserver 0.0.0.0:8000 



  data_service:
    build:
      context: ./data_service
      dockerfile: Dockerfile
    ports:
      - 8001:8000
      # - 5678:5678
    #volumes:
    #  - ./backend/weather:/usr/src/app_be
    # volumes:
    #   - type: bind
    #     source: ./data_service
    #     target: /usr/src/app_be
    # working_dir: /usr/src/app_be
    depends_on:
      db:
        condition: service_healthy
    container_name: weather_data_service_container
    healthcheck:
      # test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://localhost:8000/api/fetch"
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://localhost:8000/admin"
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 10    
    # command: python manage.py runserver 0.0.0.0:8000
    # command: pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate
    command:
      - /bin/bash
      - -c
      - |
        python manage.py makemigrations &&
        python manage.py migrate --fake-initial &&
        python manage.py runserver 0.0.0.0:8000

  db:
    image: postgres
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=weather
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    container_name: postgres_db
    healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres"]
          start_period: 10s
          interval: 10s
          timeout: 30s
          retries: 10

  app:
    image: app:react
    build:
      context: ./frontend/weather-app
      dockerfile: Dockerfile
    # volumes:
    #   - type: bind
    #     source: ./frontend/weather-app
    #     target: /usr/src/app_fe
    # working_dir: /usr/src/app_fe
    depends_on:
      - backend
    ports:
      - 3001:3000
    container_name: weather_react_container
    command: sh -c 'if [[ ! -d node_modules ]]; then npm install; fi && npm start'
    # command: npm start 
    # command: npm install && npm install react-scripts --save && npm run build && npm start 
    # && tail -F anything
    
volumes:
  # frontend:
  data:
  # weather:

